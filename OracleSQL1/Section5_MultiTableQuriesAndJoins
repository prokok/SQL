https://www.techonthenet.com/oracle/index.php 
-Alias-
***Oracle does not use 'AS' when naming table 
***SELECT ALL columns of alias: alias_name.*

Nested queries gives tremendous amount of flexibility
Multi-Table Quries
Nested Queries requires more time, so it is slow.
  - 1st execute the subquery and then next query

JOINS

WHERE EXISTS & Correlated Subquery
Correlated subquery

==============================================================================================================================================

1.Nested queries
  - Select statements within the select statement
  - First, figure out what the nested select clause means
  - It gives us tremendous amount of flexibility in our queries such as relating multiple tables by this
    select * from dept where deptno = (select deptno from dept where deptno = 30)
  - SELECT in SELECT CLAUSE : SHOULD RETURN A SINGLE VALUE
    SELECT in WHERE CLUASE : SHOULD RETURN A SINGLE VALUE OR USE 'IN' OPERATOR IF IT RETURNS A LIST OF ELEMENTS
                            IF IT RETURN A TABLE OF ELEMENTS, IT WOULD NOT Working
    SELECT in FROM CLAUSE : Mostly It returns a TABLE OF ELEMENTS OR a LIST OF ELEMENTS 
  
  Example 1.
    select * from dept 
    where deptno < (select deptno from dept where deptno = 30) 
    and dname = 'ACCOUNTING'
  
    select * from dept 
    where deptno < 30
    and dname = 'ACCOUNTING'
    
    ***ABOVE TWO Queries are doing the same thing.

  Example 2.   
    select * from emp 
    where deptno = (select deptno from dept where LOC = 'CHICAGO')
    - Employees worked in Chicago
    - Relating multiple tables

  Example 3.
    select * from emp where deptno = (select deptno from dept)
    ORA-01427: single-row subquery returns more than one row
    *** since nested query returns more than one value
    select deptno from dept
    DEPTNO  
    10
    20
    30
    40
    *** Therefore use IN opertaor 
    select * from emp where deptno IN (select deptno from dept)
  
  Example 4.
    select * from emp where deptno in (select deptno, loc, dname from dept where deptno in (10,20))
    *** ORA-00913: too many values
    *** This statement does not make sense becuase nested select clause returns a table of elements, not a list of numbers
  
  Example 5.
    select job, ename, (select job from emp) from emp
    ***	ORA-01427: single-row subquery returns more than one row
    *** it does not make sense for every single record to have entire list of jobs.
        since (select job from emp) returns a list of jobs
        
    select job, ename, (select job from emp where ename = 'KING') from emp
    JOB	ENAME	(SELECTJOBFROMEMPWHEREENAME='KING')
    PRESIDENT	KING	 PRESIDENT
    MANAGER	  BLAKE	  PRESIDENT
    MANAGER	  CLARK	  PRESIDENT
    MANAGER	  JONES	  PRESIDENT
    ANALYST	  SCOTT	  PRESIDENT
    ANALYST	  FORD	  PRESIDENT
    CLERK	    SMITH	  PRESIDENT
    SALESMAN	ALLEN	  PRESIDENT
    SALESMAN	WARD	  PRESIDENT
    SALESMAN	MARTIN	PRESIDENT
    ***since (select job from emp where ename = 'KING') returns a single 'KING'
    
    select job, ename, (SELECT * FROM DUAL) from emp
    JOB	ENAME	(SELECT*FROMDUAL)
    PRESIDENT	KING	X
    MANAGER	BLAKE	X
    MANAGER	CLARK	X
    MANAGER	JONES	X
    ANALYST	SCOTT	X
    ANALYST	FORD	X
    CLERK	SMITH	X
    SALESMAN	ALLEN	X
    SALESMAN	WARD	X
    SALESMAN	MARTIN	X
    ***since (SELECT * FROM DUAL) returns a single value 'X'
    
    SELECT A.ENAME, A.JOB, A.SAL, B.loc 
    FROM (select * from emp where job in ('MANAGER','CLERK')) A, dept B 
    where A.deptno = B.deptno
    AND B.loc = 'DALLAS'
    
    ENAME	JOB     	SAL	  LOC
    JONES	MANAGER 	2975	DALLAS
    SMITH	CLERK	    800	  DALLAS
    ADAMS	CLERK	    1100	DALLAS
    
===================================================<Join>=============================================================================

1. JOIN
  A JOIN clause is used to combine rows from two or more tables, based on a related column between them.
    
    17-1. INNER JOIN
    The INNER JOIN keyword selects records that have matching values in both tables.
    
    A. Syntax
    SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;
    
    B. Examples
    SELECT Orders.OrderID, Customers.CustomerName FROM Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;
    ***Note: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the "Orders" table that do not have matches in "Customers", these orders will not be shown!
    SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName FROM Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID
    INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID;
    
    17-2. LEFT JOIN
    The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match.
    
    A. Syntax
    SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;
    ***Note: In some databases LEFT JOIN is called LEFT OUTER JOIN.
    
    B. Examples
    SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID ORDER BY Customers.CustomerName;
    ***Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).
    
    17-3. RIGHT JOIN
    The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is NULL from the left side, when there is no match.
    
    A. Syntax
    SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name;
    ***Note: In some databases RIGHT JOIN is called RIGHT OUTER JOIN.
    
    B. Examples
    SELECT Orders.OrderID, Employees.LastName, Employees.FirstName FROM Orders RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
    ORDER BY Orders.OrderID;
    *** Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).
    
    17-4. FULL OUTER JOIN
    The FULL OUTER JOIN keyword return all records when there is a match in either left (table1) or right (table2) table records.
    ***Note: FULL OUTER JOIN can potentially return very large result-sets!
    
    A. Syntax
    SELECT column_name(s) FROM table1 FULL OUTER JOIN table2 ON table1.column_name = table2.column_name;
    
    B. Examples
    SELECT Customers.CustomerName, Orders.OrderID FROM Customers FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
    ORDER BY Customers.CustomerName;
    Note: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in "Customers" that do not have matches in "Orders", or if there are rows in "Orders" that do not have matches in "Customers", those rows will be listed as well.
    
    17-5. SELF JOIN
    A self JOIN is a regular join, but the table is joined with itself.
    
    A. Syntax
    SELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition;
    
    B. Examples
    SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City FROM Customers A, Customers B WHERE A.CustomerID <> B.CustomerID
    AND A.City = B.City ORDER BY A.City;


1. JOIN
          JOINS are used to retrieve data from multiple tables. An Oracle JOIN is performed whenever two or more tables are joined in a SQL statement.
          Oracle INNER JOIN (or sometimes called simple join)
          Oracle LEFT OUTER JOIN (or sometimes called LEFT JOIN)
          Oracle RIGHT OUTER JOIN (or sometimes called RIGHT JOIN)
          Oracle FULL OUTER JOIN (or sometimes called FULL JOIN)

1-1. INNER JOIN (simple join)
          INNER JOINS return all rows from multiple tables where the join condition is met.
          INNER JOIN would return the records where table1 and table2 intersect.

          A. Syntax
          SELECT columns
          FROM table1 
          INNER JOIN table2
          ON table1.column = table2.column;

          B. Examples
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers 
          INNER JOIN orders
          ON suppliers.supplier_id = orders.supplier_id;
          *Return all rows from the suppliers and orders tables where there is a matching supplier_id value in both the suppliers and orders tables.

          C. Old Syntax
          As a final note, it is worth mentioning that the Oracle INNER JOIN example above could be rewritten using the older implicit syntax as follows (but we still recommend using the INNER JOIN keyword syntax):
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers, orders
          WHERE suppliers.supplier_id = orders.supplier_id;

          SELECT  * 
          FROM emp, dept
          WHERE emp.deptno = dept.deptno
          
          SELECT *  
          FROM emp
          INNER JOIN dept
          on emp.deptno = dept.deptno
          
          
1-2. LEFT OUTER JOIN
          LEFT OUTER JOIN returns all rows from the LEFT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).
          LEFT OUTER JOIN would return the all records from table1 and only those records from table2 that intersect with table1.
          LEFT OUTER JOIN keywords are replaced with LEFT JOIN, in some database.

          A. Syntax
          SELECT columns
          FROM table1
          LEFT [OUTER] JOIN table2
          ON table1.column = table2.column;

          B. Example
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers
          LEFT OUTER JOIN orders
          ON suppliers.supplier_id = orders.supplier_id;
          *Return all rows from the suppliers table and only those rows from the orders table where the joined fields are equal.

          C.Old Syntax
          As a final note, it is worth mentioning that the LEFT OUTER JOIN example above could be rewritten using the older implicit syntax that utilizes the outer join operator (+) as follows (but we still recommend using the LEFT OUTER JOIN keyword syntax):
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers, orders
          WHERE suppliers.supplier_id = orders.supplier_id(+);


1-3. RIGHT OUTER JOIN
          RIGHT OUTER JOIN returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).
          RIGHT OUTER JOIN would return the all records from table2 and only those records from table1 that intersect with table2.
          RIGHT OUTER JOIN keywords are replaced with RIGHT JOIN in some database.

          A. Syntax
          SELECT columns
          FROM table1
          RIGHT [OUTER] JOIN table2
          ON table1.column = table2.column;

          B. Example
          SELECT orders.order_id, orders.order_date, suppliers.supplier_name
          FROM suppliers
          RIGHT OUTER JOIN orders
          ON suppliers.supplier_id = orders.supplier_id;
          *Return all rows from the orders table and only those rows from the suppliers table where the joined fields are equal.

          C. Old Syntax
          As a final note, it is worth mentioning that the RIGHT OUTER JOIN example above could be rewritten using the older implicit syntax that utilizes the outer join operator (+) as follows (but we still recommend using the RIGHT OUTER JOIN keyword syntax):
          SELECT orders.order_id, orders.order_date, suppliers.supplier_name
          FROM suppliers, orders
          WHERE suppliers.supplier_id(+) = orders.supplier_id;
  
  
1-4. FULL OUTER JOIN
          FULL OUTER JOIN returns all rows from the LEFT-hand table and RIGHT-hand table with nulls in place where the join condition is not met.
          FULL OUTER JOIN would return the all records from both table1 and table2.
          FULL OUTER JOIN keywords are replaced with FULL JOIN in some database

          A. Syntax
          SELECT columns
          FROM table1
          FULL [OUTER] JOIN table2
          ON table1.column = table2.column;

          B.Example
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers
          FULL OUTER JOIN orders
          ON suppliers.supplier_id = orders.supplier_id;
          *Return all rows from the suppliers table and all rows from the orders table and whenever the join condition is not met, <nulls> would be extended to those fields in the result set.

          C. Old Syntax
          As a final note, it is worth mentioning that the FULL OUTER JOIN example above could not have been written in the old syntax without using a UNION query.
  
          SELECT * 
          FROM dept FULL OUTER JOIN emp
          ON dept.deptno = emp.deptno
          ORDER BY dept.deptno ASC

          SELECT * 
          FROM (SELECT * FROM emp) FULL OUTER JOIN emp
          ON dept.deptno = emp.deptno
          ORDER BY dept.deptno ASC

          SELECT * 
          FROM (SELECT * FROM dept) d FULL OUTER JOIN (SELECT * FROM emp) e
          ON d.deptno = e.deptno
          ORDER BY d.deptno ASC

          SELECT * 
          FROM (SELECT * FROM dept) d FULL OUTER JOIN (SELECT * FROM emp WHERE job = 'SALESMAN') e
          ON d.deptno = e.deptno
          ORDER BY d.deptno ASC
          DEPTNO	DNAME	LOC	EMPNO	ENAME	JOB	MGR	HIREDATE	SAL	COMM	DEPTNO
          10	ACCOUNTING	NEW YORK	-	-	-	-	-	-	-	-
          20	RESEARCH	DALLAS	-	-	-	-	-	-	-	-
          30	SALES	CHICAGO	7654	MARTIN	SALESMAN	7698	09/28/1981	1250	1400	30
          30	SALES	CHICAGO	7521	WARD	SALESMAN	7698	02/22/1981	1250	500	30
          30	SALES	CHICAGO	7499	ALLEN	SALESMAN	7698	02/20/1981	1600	300	30
          30	SALES	CHICAGO	7844	TURNER	SALESMAN	7698	09/08/1981	1500	0	30
          40	OPERATIONS	BOSTON	-	-	-	-	-	-	-	-
          
          SELECT e.*, d.*
          FROM (SELECT * FROM dept) d LEFT OUTER JOIN (SELECT * FROM emp WHERE job = 'SALESMAN') e
          ON d.deptno = e.deptno

===================================================<WHERE EXIST>==================================================================

1. WHERE EXISTS
EXISTS condition is used in combination with a subquery and is considered "to be met" if the subquery returns at least one row. It can be used in a SELECT, INSERT, UPDATE, or DELETE statement.

A. Syntax
WHERE EXISTS ( subquery );
subquery - The subquery is a SELECT statement. If the subquery returns at least one record in its result set, the EXISTS clause will evaluate to true and the EXISTS condition will be met. If the subquery does not return any records, the EXISTS clause will evaluate to false and the EXISTS condition will not be met.


B. Example - With SELECT Statement
SELECT *
FROM customers
WHERE EXISTS (SELECT *
              FROM order_details
              WHERE customers.customer_id = order_details.customer_id);
*Example will return all records from the customers table where there is at least one record in the order_details table with the matching customer_id.

SELECT *
FROM customers
WHERE NOT EXISTS (SELECT *
                  FROM order_details
                  WHERE customers.customer_id = order_details.customer_id);
*Example will return all records from the customers table where there are no records in the order_details table for the given customer_id.


INSERT INTO contacts
(contact_id, contact_name)
SELECT supplier_id, supplier_name
FROM suppliers
WHERE EXISTS (SELECT *
              FROM order_details
              WHERE suppliers.supplier_id = order_details.supplier_id);


UPDATE suppliers
SET supplier_name = (SELECT customers.name
                     FROM customers
                     WHERE customers.customer_id = suppliers.supplier_id)
WHERE EXISTS (SELECT customers.name
              FROM customers
              WHERE customers.customer_id = suppliers.supplier_id);


DELETE FROM suppliers
WHERE EXISTS (SELECT *
              FROM order_details
              WHERE suppliers.supplier_id = order_details.supplier_id);

2. Correlated Subquery
 - Correlating Subquery with the Outer query
 SELECT D.* FROM dept d WHERE NOT EXISTS (SELECT * from emp where d.deptno = emp.deptno)
 (SELECT * from emp where d.deptno = emp.deptno) : Correlated Subquery.
 
