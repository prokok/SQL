===========================================================================================
===========================================================================================
=================================<          SQL          >=================================
https://www.techonthenet.com/oracle/index.php
https://www.w3schools.com/sql/default.asp
MySQL, SQL Server, MS Excess, Oracle Functions/DataTypes/Operators/QuickRef

<SQL commands>

SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database

INSERT INTO - inserts new data into a database

CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database

CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table

CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index

-----------------------------------------------------------------------------------------------------------------------------------

1. SELECT
The SELECT statement is used to select data from a database. The data returned is stored in a result table, called the result-set.
The SELECT DISTINCT statement is used to return only distinct (different) values. Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values. The SELECT DISTINCT statement is used to return only distinct (different) values.

A. Syntax
a. SELECT column1, column2, ...    FROM     table_name;
b. SELECT DISTINCT column1, column2,  FROM  table_name;

B. Examples
SELECT DISTINCT City FROM Customers;
SELECT DISTINCT Country FROM Customers;
SELECT DISTINCT COUNTRY,CITY FROM Customers;

SELECT COUNT(Country) FROM Customers;
SELECT COUNT(DISTINCT Country) FROM Customers; SELECT Count(*) AS DistinctCountries FROM (SELECT DISTINCT Country FROM Customers);

-----------------------------------------------------------------------------------------------------------------------------------

2. WHERE
The WHERE clause is used to filter records.
The WHERE clause is used to extract only those records that fulfill a specified condition.

A. Syntax
SELECT column1, column2, ... FROM table_name WHERE condition;

B. Examples
SELECT * FROM Customers WHERE CustomerID=1;
SELECT * FROM Customers WHERE Country='Mexico';

C. Operators in WHERE Clause
Operator	Description
=	Equal
<>	Not equal. Note: In some versions of SQL this operator may be written as !=
>	Greater than
<	Less than
>=	Greater than or equal
<=	Less than or equal
BETWEEN	Between an inclusive range
LIKE	Search for a pattern
IN	To specify multiple possible values for a column

--------------------------------------------------------------------------------------------------------------------------------------

3. AND, OR and NOT Operators
The WHERE clause can be combined with AND, OR, and NOT operators.
The AND and OR operators are used to filter records based on more than one condition:
The AND operator displays a record if all the conditions separated by AND is TRUE.
The OR operator displays a record if any of the conditions separated by OR is TRUE.
The NOT operator displays a record if the condition(s) is NOT TRUE.

A. Syntax
SELECT column1, column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ...;
SELECT column1, column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3 ...;
SELECT column1, column2, ... FROM table_name WHERE NOT condition;

B. Examples
SELECT * FROM Customers WHERE Country='Germany' AND City='Berlin';
SELECT * FROM Customers WHERE City='Berlin' OR City='München';
SELECT * FROM Customers WHERE NOT Country='Germany';

SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München');
SELECT * FROM Customers WHERE NOT Country='Germany' AND NOT Country='USA';

---------------------------------------------------------------------------------------------------------------------------------------

4. Order by
The ORDER BY keyword is used to sort the result-set in ascending or descending order.
The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

A. Syntax
SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;

B. Examples
SELECT * FROM Customers ORDER BY Country;
SELECT * FROM Customers ORDER BY Country, CustomerName;
SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;
SELECT * FROM Customers ORDER BY Country desc, CustomerName asc;

--------------------------------------------------------------------------------------------------------------------------------------

5. Insert Into
The INSERT INTO statement is used to insert new records in a table.

A. Syntax
INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);
INSERT INTO table_name VALUES (value1, value2, value3, ...);
*** If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query.
However, make sure the order of the values is in the same order as the columns in the table. The INSERT INTO syntax would be as follows:


B. Examples
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
*** The CustomerID column is an auto-increment field and will be generated automatically when a new record is inserted into the table.
INSERT INTO Customers (CustomerName, City, Country) VALUES ('Cardinal', 'Stavanger', 'Norway');
*** Insert Data Only in Specified Columns. It is also possible to only insert data in specific columns.The following SQL statement will insert a new record, but only insert data in the "CustomerName", "City", and "Country" columns (CustomerID will be updated automatically):

----------------------------------------------------------------------------------------------------------------------------------------

6. NULL Value
A field with a NULL value is a field with no value. If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
***It is very important to understand that a NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!

A. IS NULL, IS NOT NULL Syntax
SELECT column_names FROM table_name WHERE column_name IS NULL;
SELECT column_names FROM table_name WHERE column_name IS NOT NULL;

B. Examples
SELECT LastName, FirstName, Address FROM Persons WHERE Address IS NULL;
SELECT LastName, FirstName, Address FROM Persons WHERE Address IS NOT NULL;

-------------------------------------------------------------------------------------------------------------------------------------------

7. UPDATE
The UPDATE statement is used to modify the existing records in a table.

A. Syntax
UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;
*** Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!

B. 
UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;
UPDATE Customers SET ContactName='Juan' WHERE Country='Mexico';
UPDATE Customers SET ContactName='Juan';
*** Be careful when updating records. If you omit the WHERE clause, ALL records will be updated!

------------------------------------------------------------------------------------------------------------------------------------------------

8. DELETE
The DELETE statement is used to delete existing records in a table.

A. Syntax
DELETE FROM table_name WHERE condition;
*** Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) that should be deleted. If you omit the WHERE clause, all records in the table will be deleted!

B. Examples
DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
DELETE FROM table_name;
DELETE * FROM table_name;
***It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:

-------------------------------------------------------------------------------------------------------------------------------------------------

9. SELECT TOP
The SELECT TOP clause is used to specify the number of records to return. The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact on performance.
*** Note: Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses ROWNUM.

A. Syntax
SQL Server / MS Access Syntax:
SELECT TOP number|percent column_name(s) FROM table_name WHERE condition;
MySQL Syntax:
SELECT column_name(s) FROM table_name WHERE condition LIMIT number;
Oracle Syntax:
SELECT column_name(s) FROM table_name WHERE ROWNUM <= number;

B. Examples
SELECT TOP 3 * FROM Customers WHERE Country='Germany';
SELECT * FROM Customers WHERE Country='Germany' LIMIT 3;
SELECT * FROM Customers WHERE Country='Germany' AND ROWNUM <= 3;

---------------------------------------------------------------------------------------------------------------------------------------------------

10. MIN(), MAX()
The MIN() function returns the smallest value of the selected column.
The MAX() function returns the largest value of the selected column.

A. Syntax
SELECT MIN(column_name) FROM table_name WHERE condition;
SELECT MAX(column_name) FROM table_name WHERE condition;

B. Examples
SELECT MIN(Price) AS SmallestPrice FROM Products;
SELECT MAX(Price) AS LargestPrice FROM Products;

---------------------------------------------------------------------------------------------------------------------------------------------------

11. COUNT(), AVG() and SUM()
The COUNT() function returns the number of rows that matches a specified criteria.
The AVG() function returns the average value of a numeric column.
The SUM() function returns the total sum of a numeric column.

A. Syntax
SELECT COUNT(column_name) FROM table_name WHERE condition;
SELECT AVG(column_name) FROM table_name WHERE condition;
SELECT SUM(column_name) FROM table_name WHERE condition;

B. Examples
SELECT COUNT(ProductID) FROM Products;
SELECT AVG(Price) FROM Products;
SELECT SUM(Quantity) FROM OrderDetails;

----------------------------------------------------------------------------------------------------------------------------------------------------

12. LIKE operator
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
There are two wildcards used in conjunction with the LIKE operator:
%  The percent sign represents zero, one, or multiple characters
_  The underscore represents a single character
***Note: MS Access uses a question mark (?) instead of the underscore (_).

A. Syntax
SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern;
SELECT column1, column2, ... FROM table_name WHERE columnN NOT LIKE pattern;

*** Wildcard:
LIKE Operator					Description
WHERE CustomerName LIKE 'a%'	Finds any values that starts with "a"
WHERE CustomerName LIKE '%a'	Finds any values that ends with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%_%'	Finds any values that starts with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that starts with "a" and ends with "o"

B. Examples
SELECT * FROM Customers WHERE CustomerName LIKE '_r%';
SELECT * FROM Customers WHERE CustomerName LIKE 'a_%_%';
SELECT * FROM Customers WHERE ContactName LIKE 'a%o';
SELECT * FROM Customers WHERE CustomerName NOT LIKE 'a%';

----------------------------------------------------------------------------------------------------------------------------------------------------

13. Wildcards
A wildcard character is used to substitute any other character(s) in a string.
Wildcard characters are used with the SQL LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
There are two wildcards used in conjunction with the LIKE operator:

% - The percent sign represents zero, one, or multiple characters
_ - The underscore represents a single character
Note: MS Access uses a question mark (?) instead of the underscore (_).

In MS Access and SQL Server you can also use:
[charlist] - Defines sets and ranges of characters to match
[^charlist] or [!charlist] - Defines sets and ranges of characters NOT to match
The wildcards can also be used in combinations!

LIKE Operator					Description
WHERE CustomerName LIKE 'a%'	Finds any values that starts with "a"
WHERE CustomerName LIKE '%a'	Finds any values that ends with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%_%'	Finds any values that starts with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that starts with "a" and ends with "o"

[charlist]												Description
SELECT * FROM Customers WHERE City LIKE '[bsp]%';		selects all customers with a City starting with "b", "s", or "p".
SELECT * FROM Customers WHERE City LIKE '[a-c]%';		selects all customers with a City starting with "a", "b", or "c".

[!charlist]												Description
SELECT * FROM Customers WHERE City LIKE '[!bsp]%';		selects all customers with a City NOT starting with "b", "s", or "p":
SELECT * FROM Customers WHERE City NOT LIKE '[bsp]%';	selects all customers with a City NOT starting with "b", "s", or "p":

----------------------------------------------------------------------------------------------------------------------------------------------------

14. IN Operator
The IN operator allows you to specify multiple values in a WHERE clause.
The IN operator is a shorthand for multiple OR conditions.

A. Syntax
SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...);
SELECT column_name(s) FROM table_name WHERE column_name IN (SELECT STATEMENT);

B. Examples
SELECT * FROM Customers WHERE Country IN ('Germany', 'France', 'UK');
SELECT * FROM Customers WHERE Country NOT IN ('Germany', 'France', 'UK');
SELECT * FROM Customers WHERE Country IN (SELECT Country FROM Suppliers);

----------------------------------------------------------------------------------------------------------------------------------------------------

15. BETWEEN Operator
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
The BETWEEN operator is inclusive: begin and end values are included.

A. Syntax
SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;

B. Examples
SELECT * FROM Products WHERE Price BETWEEN 10 AND 20;
SELECT * FROM Products WHERE Price NOT BETWEEN 10 AND 20;
SELECT * FROM Products WHERE (Price BETWEEN 10 AND 20) AND CategoryID NOT IN (1,2,3);
== SELECT * FROM Products WHERE (Price BETWEEN 10 AND 20) AND NOT CategoryID IN (1,2,3);
SELECT * FROM Products WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni' ORDER BY ProductName;
SELECT * FROM Products WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni' ORDER BY ProductName;
SELECT * FROM Orders WHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;
- selects all orders with an OrderDate BETWEEN '04-July-1996' and '09-July-1996'.

----------------------------------------------------------------------------------------------------------------------------------

16. Aliases
SQL aliases are used to give a table, or a column in a table, a temporary name.
Aliases are often used to make column names more readable. An alias only exists for the duration of the query.
Aliases can be useful when:
* There are more than one table involved in a query
* Functions are used in the query
* Column names are big or not very readable
* Two or more columns are combined together

A. Syntax
SELECT column_name AS alias_name FROM table_name;
SELECT column_name(s) FROM table_name AS alias_name;

B. Examples
SELECT CustomerID as ID, CustomerName AS Customer FROM Customers;
SELECT CustomerName AS Customer, ContactName AS [Contact Person] FROM Customers;
*** Note: It requires double quotation marks or square brackets if the alias name contains spaces.
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address FROM Customers;
- creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country)
SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address FROM Customers;
*** Note: To get the SQL statement above to work in MySQL use the following
SELECT o.OrderID, o.OrderDate, c.CustomerName FROM Customers AS c, Orders AS o WHERE c.CustomerName="Around the Horn" AND c.CustomerID=o.CustomerID;
- selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the "Customers" and "Orders" tables, and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter)

-----------------------------------------------------------------------------------------------------------------------------------

17. JOIN
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

17-1. INNER JOIN
The INNER JOIN keyword selects records that have matching values in both tables.

A. Syntax
SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;

B. Examples
SELECT Orders.OrderID, Customers.CustomerName FROM Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;
***Note: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the "Orders" table that do not have matches in "Customers", these orders will not be shown!
SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName FROM Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID;

17-2. LEFT JOIN
The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match.

A. Syntax
SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;
***Note: In some databases LEFT JOIN is called LEFT OUTER JOIN.

B. Examples
SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID ORDER BY Customers.CustomerName;
***Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).

17-3. RIGHT JOIN
The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is NULL from the left side, when there is no match.

A. Syntax
SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name;
***Note: In some databases RIGHT JOIN is called RIGHT OUTER JOIN.

B. Examples
SELECT Orders.OrderID, Employees.LastName, Employees.FirstName FROM Orders RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;
*** Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).

17-4. FULL OUTER JOIN
The FULL OUTER JOIN keyword return all records when there is a match in either left (table1) or right (table2) table records.
***Note: FULL OUTER JOIN can potentially return very large result-sets!

A. Syntax
SELECT column_name(s) FROM table1 FULL OUTER JOIN table2 ON table1.column_name = table2.column_name;

B. Examples
SELECT Customers.CustomerName, Orders.OrderID FROM Customers FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;
Note: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in "Customers" that do not have matches in "Orders", or if there are rows in "Orders" that do not have matches in "Customers", those rows will be listed as well.

17-5. SELF JOIN
A self JOIN is a regular join, but the table is joined with itself.

A. Syntax
SELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition;

B. Examples
SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City FROM Customers A, Customers B WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City ORDER BY A.City;


1. JOIN
          JOINS are used to retrieve data from multiple tables. An Oracle JOIN is performed whenever two or more tables are joined in a SQL statement.
          Oracle INNER JOIN (or sometimes called simple join)
          Oracle LEFT OUTER JOIN (or sometimes called LEFT JOIN)
          Oracle RIGHT OUTER JOIN (or sometimes called RIGHT JOIN)
          Oracle FULL OUTER JOIN (or sometimes called FULL JOIN)

1-1. INNER JOIN (simple join)
          INNER JOINS return all rows from multiple tables where the join condition is met.
          INNER JOIN would return the records where table1 and table2 intersect.

          A. Syntax
          SELECT columns
          FROM table1 
          INNER JOIN table2
          ON table1.column = table2.column;

          B. Examples
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers 
          INNER JOIN orders
          ON suppliers.supplier_id = orders.supplier_id;
          *Return all rows from the suppliers and orders tables where there is a matching supplier_id value in both the suppliers and orders tables.

          C. Old Syntax
          As a final note, it is worth mentioning that the Oracle INNER JOIN example above could be rewritten using the older implicit syntax as follows (but we still recommend using the INNER JOIN keyword syntax):
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers, orders
          WHERE suppliers.supplier_id = orders.supplier_id;


1-2. LEFT OUTER JOIN
          LEFT OUTER JOIN returns all rows from the LEFT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).
          LEFT OUTER JOIN would return the all records from table1 and only those records from table2 that intersect with table1.
          LEFT OUTER JOIN keywords are replaced with LEFT JOIN, in some database.

          A. Syntax
          SELECT columns
          FROM table1
          LEFT [OUTER] JOIN table2
          ON table1.column = table2.column;

          B. Example
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers
          LEFT OUTER JOIN orders
          ON suppliers.supplier_id = orders.supplier_id;
          *Return all rows from the suppliers table and only those rows from the orders table where the joined fields are equal.

          C.Old Syntax
          As a final note, it is worth mentioning that the LEFT OUTER JOIN example above could be rewritten using the older implicit syntax that utilizes the outer join operator (+) as follows (but we still recommend using the LEFT OUTER JOIN keyword syntax):
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers, orders
          WHERE suppliers.supplier_id = orders.supplier_id(+);


1-3. RIGHT OUTER JOIN
          RIGHT OUTER JOIN returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).
          RIGHT OUTER JOIN would return the all records from table2 and only those records from table1 that intersect with table2.
          RIGHT OUTER JOIN keywords are replaced with RIGHT JOIN in some database.

          A. Syntax
          SELECT columns
          FROM table1
          RIGHT [OUTER] JOIN table2
          ON table1.column = table2.column;

          B. Example
          SELECT orders.order_id, orders.order_date, suppliers.supplier_name
          FROM suppliers
          RIGHT OUTER JOIN orders
          ON suppliers.supplier_id = orders.supplier_id;
          *Return all rows from the orders table and only those rows from the suppliers table where the joined fields are equal.

          C. Old Syntax
          As a final note, it is worth mentioning that the RIGHT OUTER JOIN example above could be rewritten using the older implicit syntax that utilizes the outer join operator (+) as follows (but we still recommend using the RIGHT OUTER JOIN keyword syntax):
          SELECT orders.order_id, orders.order_date, suppliers.supplier_name
          FROM suppliers, orders
          WHERE suppliers.supplier_id(+) = orders.supplier_id;
  
  
1-4. FULL OUTER JOIN
          FULL OUTER JOIN returns all rows from the LEFT-hand table and RIGHT-hand table with nulls in place where the join condition is not met.
          FULL OUTER JOIN would return the all records from both table1 and table2.
          FULL OUTER JOIN keywords are replaced with FULL JOIN in some database

          A. Syntax
          SELECT columns
          FROM table1
          FULL [OUTER] JOIN table2
          ON table1.column = table2.column;

          B.Example
          SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
          FROM suppliers
          FULL OUTER JOIN orders
          ON suppliers.supplier_id = orders.supplier_id;
          *Return all rows from the suppliers table and all rows from the orders table and whenever the join condition is not met, <nulls> would be extended to those fields in the result set.

          C. Old Syntax
          As a final note, it is worth mentioning that the FULL OUTER JOIN example above could not have been written in the old syntax without using a UNION query.
  

-----------------------------------------------------------------------------------------------------------------------------------

18. UNION Operator
The UNION operator is used to combine the result-set of two or more SELECT statements.
* Each SELECT statement within UNION must have the same number of columns
* The columns must also have similar data types
* The columns in each SELECT statement must also be in the same order

A. Syntax
SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;
SELECT column_name(s) FROM table1 UNION ALL SELECT column_name(s) FROM table2;
***The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:
***Note: The column names in the result-set are usually equal to the column names in the first SELECT statement in the UNION.

B. Examples
SELECT City FROM Customers UNION SELECT City FROM Suppliers ORDER BY City;
SELECT City FROM Customers UNION ALL SELECT City FROM Suppliers ORDER BY City;
SELECT City, Country FROM Customers WHERE Country='Germany' UNION SELECT City, Country FROM Suppliers WHERE Country='Germany' ORDER BY City;
SELECT City, Country FROM Customers WHERE Country='Germany' UNION ALL SELECT City, Country FROM Suppliers WHERE Country='Germany' ORDER BY City;
SELECT 'Customer' As Type, ContactName, City, Country FROM Customers UNION SELECT 'Supplier', ContactName, City, Country FROM Suppliers;

----------------------------------------------C-------------------------------------------------------------------------------------

19. GROUP BY

1) SELECT expression1, expression2, ... expression_n, 
       aggregate_function (aggregate_expression)
2) FROM tables
3) WHERE conditions (Single row functions only)
---
4) GROUP BY expression1, expression2, ... expression_n
5) HAVING having_condition; (Grouping function)
---
6) ORDER BY expression
---

The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.

A. Syntax
SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) ORDER BY column_name(s);

B. Examples
SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country;
SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC;
SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;

GROUP BY
GROUP BY clause is used in a SELECT statement to collect data across multiple records and group the results by one or more columns.

A. Syntax
SELECT expression1, expression2, ... expression_n, 
       aggregate_function (aggregate_expression)
FROM tables
[WHERE conditions]
GROUP BY expression1, expression2, ... expression_n;

expression1, expression2, ... expression_n - The expressions that are not encapsulated within an aggregate function and must be included in the GROUP BY clause.
aggregate_function - It can be a function such as SUM, COUNT, MIN, MAX, or AVG functions.
aggregate_expression - This is the column or expression that the aggregate_function will be used on.
tables - The tables that you wish to retrieve records from. There must be at least one table listed in the FROM clause.
WHERE conditions - Optional. The conditions that must be met for the records to be selected.

B. Examples
SELECT product, SUM(sale) AS "Total sales"
FROM order_details
GROUP BY product;

Because you have listed one column (the product field) in your SELECT statement that is not encapsulated in the SUM function, you must use the GROUP BY clause. The product field must, therefore, be listed in the GROUP BY clause.

SELECT category, COUNT(*) AS "Number of suppliers"
FROM suppliers
WHERE available_products > 45
GROUP BY category;

SELECT department, MIN(salary) AS "Lowest salary"
FROM employees
GROUP BY department;

SELECT department, MAX(salary) AS "Highest salary"
FROM employees
GROUP BY department;

SELECT COUNT(*), JOB FROM EMP GROUP BY JOB;
COUNT(*)	JOB
4	        CLERK
4	        SALESMAN
1       	PRESIDENT
3       	MANAGER
2	        ANALYST

-----------------------------------------------------------------------------------------------------------------------------------

20. HAVING

1) SELECT expression1, expression2, ... expression_n, 
       aggregate_function (aggregate_expression)
2) FROM tables
3) WHERE conditions (Single row functions only)
---
4) GROUP BY expression1, expression2, ... expression_n
5) HAVING having_condition; (Grouping function)
---
6) ORDER BY expression
---

The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.
***WE CANNOT USE GROUP FUNCTIONS IN THE WHERE CLAUSE.
***Always followed by group by.

A. Syntax
SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

B. Examples
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5
ORDER BY COUNT(CustomerID) DESC;


HAVING
HAVING clause is used in combination with the GROUP BY clause to restrict the groups of returned rows to only those whose the condition is TRUE.

A. Syntax
SELECT expression1, expression2, ... expression_n, 
       aggregate_function (aggregate_expression)
FROM tables
[WHERE conditions]
GROUP BY expression1, expression2, ... expression_n
HAVING having_condition;
Parameters or Arguments

expression1, expression2, ... expression_n - The expressions that are not encapsulated within an aggregate function and must be included in the GROUP BY clause.
aggregate_function - It can be a function such as SUM, COUNT, MIN, MAX, or AVG functions.
aggregate_expression - This is the column or expression that the aggregate_function will be used against.
tables - The tables that you wish to retrieve records from. There must be at least one table listed in the FROM clause.
WHERE conditions - Optional. These are the conditions for the records to be selected.
having_condition - This is a further condition applied only to the aggregated results to restrict the groups of returned rows. Only those groups whose condition evaluates to TRUE will be included in the result set.

B. Example 

SELECT department, SUM(sales) AS "Total sales"
FROM order_details
GROUP BY department
HAVING SUM(sales) > 25000;

SELECT department, COUNT(*) AS "Number of employees"
FROM employees
WHERE salary < 49500
GROUP BY department
HAVING COUNT(*) > 10;

SELECT department, MIN(salary) AS "Lowest salary"
FROM employees
GROUP BY department
HAVING MIN(salary) < 42000;

SELECT department, MAX(salary) AS "Highest salary"
FROM employees
GROUP BY department
HAVING MAX(salary) > 45000;

-----------------------------------------------------------------------------------------------------------------------------------

21. EXIST Operator
The EXISTS operator is used to test for the existence of any record in a subquery.
The EXISTS operator returns true if the subquery returns one or more records.

A. Syntax
SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);

B. Examples
SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE SupplierId = Suppliers.supplierId AND Price < 20);
SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE SupplierId = Suppliers.supplierId AND Price = 22);

-----------------------------------------------------------------------------------------------------------------------------------

22. ANY, ALL Operator
The ANY and ALL operators are used with a WHERE or HAVING clause.
The ANY operator returns true if any of the subquery values meet the condition.
The ALL operator returns true if all of the subquery values meet the condition.

A. Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name operator ANY
(SELECT column_name FROM table_name WHERE condition);

SELECT column_name(s)
FROM table_name
WHERE column_name operator ALL
(SELECT column_name FROM table_name WHERE condition);
***Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).

B. Examples
SELECT ProductName
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

SELECT ProductName
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity > 99);

SELECT ProductName
FROM Products
WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

-----------------------------------------------------------------------------------------------------------------------------------

23. SELECT INTO
The SELECT INTO statement copies data from one table into a new table.

A. Syntax
SELECT *
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition;

SELECT column1, column2, column3, ...
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition;


B. Examples
SELECT * INTO CustomersBackup2017
FROM Customers;

SELECT * INTO CustomersBackup2017 IN 'Backup.mdb'
FROM Customers;

SELECT CustomerName, ContactName INTO CustomersBackup2017
FROM Customers;

SELECT * INTO CustomersGermany
FROM Customers
WHERE Country = 'Germany';

SELECT Customers.CustomerName, Orders.OrderID
INTO CustomersOrderBackup2017
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

SELECT * INTO newtable
FROM oldtable
WHERE 1 = 0;
***Tip: SELECT INTO can also be used to create a new, empty table using the schema of another. Just add a WHERE clause that causes the query to return no data:

-----------------------------------------------------------------------------------------------------------------------------------

24. INSERT INTO SELECT
The INSERT INTO SELECT statement copies data from one table and inserts it into another table.
* INSERT INTO SELECT requires that data types in source and target tables match
* The existing records in the target table are unaffected

A. Syntax
INSERT INTO table2
SELECT * FROM table1
WHERE condition;

INSERT INTO table2 (column1, column2, column3, ...)
SELECT column1, column2, column3, ...
FROM table1
WHERE condition;

B. Exmaples
INSERT INTO Customers (CustomerName, City, Country)
SELECT SupplierName, City, Country FROM Suppliers;

INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
SELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;

INSERT INTO Customers (CustomerName, City, Country)
SELECT SupplierName, City, Country FROM Suppliers
WHERE Country='Germany';

-----------------------------------------------------------------------------------------------------------------------------------

25. IFNULL(), ISNULL(), COALESCE(), and NVL()

-MySQL-
IFNULL(), COALESCE()
IFNULL() function lets you return an alternative value if an expression is NULL:
A. Syntax
SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0)) FROM Products
or we can use the COALESCE() function, like this:
SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0)) FROM Products

-SQL Server-
ISNULL()
ISNULL() function lets you return an alternative value when an expression is NULL:
A. Syntax
SELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0)) FROM Products

-MS Access-
IsNull()
IsNull() function returns TRUE (-1) if the expression is a null value, otherwise FALSE (0):
A. Syntax
SELECT ProductName, UnitPrice * (UnitsInStock + IIF(IsNull(UnitsOnOrder), 0, UnitsOnOrder)) FROM Products
***IIF(logic,true expression,false expression)

-Oracle-
NVL() function achieves the same result:
A. Syntax
SELECT ProductName, UnitPrice * (UnitsInStock + NVL(UnitsOnOrder, 0)) FROM Products

-----------------------------------------------------------------------------------------------------------------------------------

26. SQL Comments
Comments are used to explain sections of SQL statements, or to prevent execution of SQL statements.

26-1. Single Line Comments
Single line comments start with --.
Any text between -- and the end of the line will be ignored (will not be executed).
The following example uses a single-line comment as an explanation:
--Select all:
SELECT * FROM Customers;

SELECT * FROM Customers -- WHERE City='Berlin';


26-2. Multi-line Comments
Multi-line comments start with /* and end with */.
Any text between /* and */ will be ignored.
The following example uses a multi-line comment as an explanation:

/*Select all the columns
of all the records
in the Customers table:*/
SELECT * FROM Customers;


26-3. To ignore just a part of a statement, also use the /* */ comment.
The following example uses a comment to ignore part of a line:
SELECT CustomerName, /*City,*/ Country FROM Customers;

SELECT * FROM Customers WHERE (CustomerName LIKE 'L%'
OR CustomerName LIKE 'R%' /*OR CustomerName LIKE 'S%'
OR CustomerName LIKE 'T%'*/ OR CustomerName LIKE 'W%')
AND Country='USA'
ORDER BY CustomerName;

========================================================================================================================================
==========================================================<SQL Databse>=================================================================

1. CREATE DATABASE
The CREATE DATABASE statement is used to create a new SQL database.

A. Syntax
CREATE DATABASE databasename;

B. Example
CREATE DATABASE PHILHOON;
***Tip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;

-----------------------------------------------------------------------------------------------------------------------------------------

2. DROP DATABASE
DROP DATABASE statement is used to drop an existing SQL database.

A. Syntax
DROP DATABASE databasename;
Note: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!

B. Examples
DROP DATABASE testDB;
***Tip: Make sure you have admin privilege before dropping any database. Once a database is dropped, you can check it in the list of databases with the following SQL command: SHOW DATABASES;

-----------------------------------------------------------------------------------------------------------------------------------------

3. CREATE TABLE
The CREATE TABLE statement is used to create a new table in a database.

A. Syntax
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);
The column parameters specify the names of the columns of the table.
The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.).
***Tip: For an overview of the available data types, go to our complete Data Types Reference.

-Create Table Using Another Table-
A copy of an existing table can be created using a combination of the CREATE TABLE statement and the SELECT statement.
The new table gets the same column definitions. All columns or specific columns can be selected.
If you create a new table using an existing table, the new table will be filled with the existing values from the old table.

CREATE TABLE new_table_name AS
    SELECT column1, column2,...
    FROM existing_table_name
    WHERE ....;

SELECT * INTO newtable
FROM oldtable
WHERE 1 = 0;
***Tip: SELECT INTO can also be used to create a new, empty table using the schema of another. Just add a WHERE clause that causes the query to return no data:

B. Examples
CREATE TABLE Persons (
    PersonID int,
    LastName varchar(255),
    FirstName varchar(255),
    Address varchar(255),
    City varchar(255)
);

-----------------------------------------------------------------------------------------------------------------------------------------

4. DROP TABLE
The following SQL statement drops the existing table

A. Syntax
DROP TABLE Shippers;

B. Examples
DROP TABLE Shippers;

-------------------------------------------------------------------------------------------------------------------------------------------

5. TRUNCATE TABLE
The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.

A. Syntax
TRUNCATE TABLE table_name;

-------------------------------------------------------------------------------------------------------------------------------------------

6. ALTER TABLE
The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
The ALTER TABLE statement is also used to add and drop various constraints on an existing table.


A. Syntax

ALTER TABLE - ADD Column
To add a column in a table, use the following syntax:
ALTER TABLE table_name
ADD column_name datatype;


ALTER TABLE - DROP COLUMN
To delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column):
ALTER TABLE table_name
DROP COLUMN column_name;


ALTER TABLE - ALTER/MODIFY COLUMN
To change the data type of a column in a table, use the following syntax:

SQL Server / MS Access:
ALTER TABLE table_name
ALTER COLUMN column_name datatype;

My SQL / Oracle (prior version 10G):
ALTER TABLE table_name
MODIFY COLUMN column_name datatype;

Oracle 10G and later:
ALTER TABLE table_name
MODIFY column_name datatype;


------------------------------------------------------------------------------------------------------------------------------------------------

7. Constraints
SQL constraints are used to specify rules for data in a table.

A. Syntax
CREATE TABLE table_name (
    column1 datatype constraint,
    column2 datatype constraint,
    column3 datatype constraint,
    ....
);

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.

Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.

The following constraints are commonly used in SQL:

NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY - Uniquely identifies a row/record in another table
CHECK - Ensures that all values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column when no value is specified
INDEX - Used to create and retrieve data from the database very quickly

<7-1. NOT NULL>

By default, a column can hold NULL values.
The NOT NULL constraint enforces a column to NOT accept NULL values.
This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.

The following SQL ensures that the "ID", "LastName", and "FirstName" columns will NOT accept NULL values:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);


<7-2. Unique>


The UNIQUE constraint ensures that all values in a column are different.
Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.
A PRIMARY KEY constraint automatically has a UNIQUE constraint.
However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.

----------SQL UNIQUE Constraint on CREATE TABLE----------
The following SQL creates a UNIQUE constraint on the "ID" column when the "Persons" table is created:

SQL Server / Oracle / MS Access:

CREATE TABLE Persons (
    ID int NOT NULL UNIQUE,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);

MySQL:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);

To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);

----------SQL UNIQUE Constraint on ALTER TABLE----------
To create a UNIQUE constraint on the "ID" column when the table is already created, use the following SQL:

MySQL / SQL Server / Oracle / MS Access:

ALTER TABLE Persons
ADD UNIQUE (ID);

To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:

ALTER TABLE Persons
ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);


--------------------DROP a UNIQUE Constraint---------------------
To drop a UNIQUE constraint, use the following SQL:

MySQL:

ALTER TABLE Persons
DROP INDEX UC_Person;

SQL Server / Oracle / MS Access:

ALTER TABLE Persons
DROP CONSTRAINT UC_Person;


<7-3. Primary Key>


The PRIMARY KEY constraint uniquely identifies each record in a database table.
Primary keys must contain UNIQUE values, and cannot contain NULL values.
A table can have only one primary key, which may consist of single or multiple fields.

-------------------------SQL PRIMARY KEY on CREATE TABLE------------------------------------------
The following SQL creates a PRIMARY KEY on the "ID" column when the "Persons" table is created:

MySQL:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

SQL Server / Oracle / MS Access:
CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);


To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
);
Note: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).

----------------------SQL PRIMARY KEY on ALTER TABLE----------------------------
To create a PRIMARY KEY constraint on the "ID" column when the table is already created, use the following SQL:

MySQL / SQL Server / Oracle / MS Access:
ALTER TABLE Persons
ADD PRIMARY KEY (ID);

To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:
MySQL / SQL Server / Oracle / MS Access:
ALTER TABLE Persons
ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);
Note: If you use the ALTER TABLE statement to add a primary key, the primary key column(s) must already have been declared to not contain NULL values (when the table was first created).

------------------------DROP a PRIMARY KEY Constraint--------------------------
To drop a PRIMARY KEY constraint, use the following SQL:

MySQL:
ALTER TABLE Persons
DROP PRIMARY KEY;

SQL Server / Oracle / MS Access:
ALTER TABLE Persons
DROP CONSTRAINT PK_Person;


<7-4. FOREIGN KEY>


A FOREIGN KEY is a key used to link two tables together.
A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.
The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.
Look at the following two tables:

"Persons" table:

PersonID	LastName	FirstName	Age
1			Hansen		Ola			30
2			Svendson	Tove		23
3			Pettersen	Kari		20


"Orders" table:

OrderID	OrderNumber	PersonID
1		77895		3
2		44678		3
3		22456		2
4		24562		1

Notice that the "PersonID" column in the "Orders" table points to the "PersonID" column in the "Persons" table.
The "PersonID" column in the "Persons" table is the PRIMARY KEY in the "Persons" table.
The "PersonID" column in the "Orders" table is a FOREIGN KEY in the "Orders" table.
The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.
The FOREIGN KEY constraint also prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the table it points to.

-------------------------SQL FOREIGN KEY on CREATE TABLE--------------------------------
The following SQL creates a FOREIGN KEY on the "PersonID" column when the "Orders" table is created:

MySQL:

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);

SQL Server / Oracle / MS Access:

CREATE TABLE Orders (
    OrderID int NOT NULL PRIMARY KEY,
    OrderNumber int NOT NULL,
    PersonID int FOREIGN KEY REFERENCES Persons(PersonID)
);

To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);

------------------------SQL FOREIGN KEY on ALTER TABLE-----------------------------------------
To create a FOREIGN KEY constraint on the "PersonID" column when the "Orders" table is already created, use the following SQL:

MySQL / SQL Server / Oracle / MS Access:

ALTER TABLE Orders
ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);


To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:

ALTER TABLE Orders
ADD CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

----------------------------DROP a FOREIGN KEY Constraint-----------------------------------------
To drop a FOREIGN KEY constraint, use the following SQL:

MySQL:

ALTER TABLE Orders
DROP FOREIGN KEY FK_PersonOrder;

SQL Server / Oracle / MS Access:

ALTER TABLE Orders
DROP CONSTRAINT FK_PersonOrder;


<7-5. CHECK>


The CHECK constraint is used to limit the value range that can be placed in a column.
If you define a CHECK constraint on a single column it allows only certain values for this column.
If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.

----------------------------------------------SQL CHECK on CREATE TABLE-------------------------------------------
The following SQL creates a CHECK constraint on the "Age" column when the "Persons" table is created. The CHECK constraint ensures that you can not have any person below 18 years:

MySQL:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);

SQL Server / Oracle / MS Access:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int CHECK (Age>=18)
);

To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);

--------------------------------------------------SQL CHECK on ALTER TABLE----------------------------------------------
To create a CHECK constraint on the "Age" column when the table is already created, use the following SQL:

MySQL / SQL Server / Oracle / MS Access:
ALTER TABLE Persons
ADD CHECK (Age>=18);

To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:
ALTER TABLE Persons
ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');

---------------------------------------------------DROP a CHECK Constraint-------------------------------------------------
To drop a CHECK constraint, use the following SQL:

SQL Server / Oracle / MS Access:
ALTER TABLE Persons
DROP CONSTRAINT CHK_PersonAge;
MySQL:

ALTER TABLE Persons
DROP CHECK CHK_PersonAge;


<7-6. DEFAULT>


The DEFAULT constraint is used to provide a default value for a column.
The default value will be added to all new records IF no other value is specified.

----------------------------------------------SQL DEFAULT on CREATE TABLE------------------------------------------------------
The following SQL sets a DEFAULT value for the "City" column when the "Persons" table is created:

My SQL / SQL Server / Oracle / MS Access:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);


The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():

CREATE TABLE Orders (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate date DEFAULT GETDATE()
);

-----------------------------------------------SQL DEFAULT on ALTER TABLE---------------------------------------------------------
To create a DEFAULT constraint on the "City" column when the table is already created, use the following SQL:

MySQL:
ALTER TABLE Persons
ALTER City SET DEFAULT 'Sandnes';

SQL Server / MS Access:
ALTER TABLE Persons
ALTER COLUMN City SET DEFAULT 'Sandnes';

Oracle:
ALTER TABLE Persons
MODIFY City DEFAULT 'Sandnes';

---------------------------------------------DROP a DEFAULT Constraint-------------------------------------------------------------
To drop a DEFAULT constraint, use the following SQL:

MySQL:
ALTER TABLE Persons
ALTER City DROP DEFAULT;

SQL Server / Oracle / MS Access:
ALTER TABLE Persons
ALTER COLUMN City DROP DEFAULT;


<7-7. CREATE INDEX>


The CREATE INDEX statement is used to create indexes in tables.
Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.
Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.

A. Syntax
Duplicate values are not allowed:
CREATE INDEX index_name ON table_name (column1, column2, ...);

Duplicate values are not allowed:
CREATE UNIQUE INDEX index_name ON table_name (column1, column2, ...);
Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.

B. Examples

The SQL statement below creates an index named "idx_lastname" on the "LastName" column in the "Persons" table:
CREATE INDEX idx_lastname ON Persons (LastName);

If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:
CREATE INDEX idx_pname ON Persons (LastName, FirstName);

DROP INDEX Statement
delete an index in a table.

MS Access:
DROP INDEX index_name ON table_name;

SQL Server:
DROP INDEX table_name.index_name;

DB2/Oracle:
DROP INDEX index_name;

MySQL:
ALTER TABLE table_name DROP INDEX index_name;

----------------------------------------------------------------------------------------------------------------------------------------

8. AUTO INCREMENT Field
Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.
Often this is the primary key field that we would like to be created automatically every time a new record is inserted.

-----Syntax for MySQL------
The following SQL statement defines the "ID" column to be an auto-increment primary key field in the "Persons" table:

CREATE TABLE Persons (
    ID int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.
By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.

To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:
ALTER TABLE Persons AUTO_INCREMENT=100;

To insert a new record into the "Persons" table, we will NOT have to specify a value for the "ID" column (a unique value will be added automatically):
INSERT INTO Persons (FirstName,LastName)
VALUES ('Lars','Monsen');

The SQL statement above would insert a new record into the "Persons" table. The "ID" column would be assigned a unique value. The "FirstName" column would be set to "Lars" and the "LastName" column would be set to "Monsen".

------Syntax for SQL Server------
The following SQL statement defines the "ID" column to be an auto-increment primary key field in the "Persons" table:

CREATE TABLE Persons (
    ID int IDENTITY(1,1) PRIMARY KEY,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);

The MS SQL Server uses the IDENTITY keyword to perform an auto-increment feature.
In the example above, the starting value for IDENTITY is 1, and it will increment by 1 for each new record.
***Tip: To specify that the "ID" column should start at value 10 and increment by 5, change it to IDENTITY(10,5).

To insert a new record into the "Persons" table, we will NOT have to specify a value for the "ID" column (a unique value will be added automatically):
INSERT INTO Persons (FirstName,LastName)
VALUES ('Lars','Monsen');

The SQL statement above would insert a new record into the "Persons" table. The "ID" column would be assigned a unique value. The "FirstName" column would be set to "Lars" and the "LastName" column would be set to "Monsen".

------Syntax for Access------
The following SQL statement defines the "ID" column to be an auto-increment primary key field in the "Persons" table:

CREATE TABLE Persons (
    ID Integer PRIMARY KEY AUTOINCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);

The MS Access uses the AUTOINCREMENT keyword to perform an auto-increment feature.
By default, the starting value for AUTOINCREMENT is 1, and it will increment by 1 for each new record.
***Tip: To specify that the "ID" column should start at value 10 and increment by 5, change the autoincrement to AUTOINCREMENT(10,5).

To insert a new record into the "Persons" table, we will NOT have to specify a value for the "ID" column (a unique value will be added automatically):
INSERT INTO Persons (FirstName,LastName)
VALUES ('Lars','Monsen');

The SQL statement above would insert a new record into the "Persons" table. The "P_Id" column would be assigned a unique value. The "FirstName" column would be set to "Lars" and the "LastName" column would be set to "Monsen".

------Syntax for Oracle------
In Oracle the code is a little bit more tricky.

You will have to create an auto-increment field with the sequence object (this object generates a number sequence).

Use the following CREATE SEQUENCE syntax:

CREATE SEQUENCE seq_person
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

The code above creates a sequence object called seq_person, that starts with 1 and will increment by 1. It will also cache up to 10 values for performance. The cache option specifies how many sequence values will be stored in memory for faster access.

To insert a new record into the "Persons" table, we will have to use the nextval function (this function retrieves the next value from seq_person sequence):
INSERT INTO Persons (ID,FirstName,LastName)
VALUES (seq_person.nextval,'Lars','Monsen');

The SQL statement above would insert a new record into the "Persons" table. The "ID" column would be assigned the next number from the seq_person sequence. The "FirstName" column would be set to "Lars" and the "LastName" column would be set to "Monsen".

-----------------------------------------------------------------------------------------------------------------------------------------------------

9. DATES

The most difficult part when working with dates is to be sure that the format of the date you are trying to insert, matches the format of the date column in the database.
As long as your data contains only the date portion, your queries will work as expected. However, if a time portion is involved, it gets more complicated.

SQL Date Data Types

MySQL comes with the following data types for storing a date or a date/time value in the database:
	DATE - format YYYY-MM-DD
	DATETIME - format: YYYY-MM-DD HH:MI:SS
	TIMESTAMP - format: YYYY-MM-DD HH:MI:SS
	YEAR - format YYYY or YY

SQL Server comes with the following data types for storing a date or a date/time value in the database:
	DATE - format YYYY-MM-DD
	DATETIME - format: YYYY-MM-DD HH:MI:SS
	SMALLDATETIME - format: YYYY-MM-DD HH:MI:SS
	TIMESTAMP - format: a unique number

Note: The date types are chosen for a column when you create a new table in your database!

------SQL Working with Dates------
You can compare two dates easily if there is no time component involved!

Assume we have the following "Orders" table:

OrderId	ProductName				OrderDate
1		Geitost					2008-11-11
2		Camembert Pierrot		2008-11-09
3		Mozzarella di Giovanni	2008-11-11
4		Mascarpone Fabioli		2008-10-29
Now we want to select the records with an OrderDate of "2008-11-11" from the table above.

We use the following SELECT statement:
SELECT * FROM Orders WHERE OrderDate='2008-11-11'

The result-set will look like this:
OrderId	ProductName				OrderDate
1		Geitost					2008-11-11
3		Mozzarella di Giovanni	2008-11-11

Now, assume that the "Orders" table looks like this (notice the time component in the "OrderDate" column):

OrderId	ProductName				OrderDate
1		Geitost					2008-11-11 13:23:44
2		Camembert Pierrot		2008-11-09 15:45:21
3		Mozzarella di Giovanni	2008-11-11 11:12:01
4		Mascarpone Fabioli		2008-10-29 14:56:59

If we use the same SELECT statement as above:

SELECT * FROM Orders WHERE OrderDate='2008-11-11'
we will get no result! This is because the query is looking only for dates with no time portion.

***Tip: To keep your queries simple and easy to maintain, do not allow time components in your dates!

-------------------------------------------------------------------------------------------------------------------------------------

10. CREATE VIEW

In SQL, a view is a virtual table based on the result-set of an SQL statement.
A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.
You can add SQL functions, WHERE, and JOIN statements to a view and present the data as if the data were coming from one single table.

A. Syntax
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;
***Note: A view always shows up-to-date data! The database engine recreates the data, using the view's SQL statement, every time a user queries a view.

B. Examples
If you have the Northwind database you can see that it has several views installed by default.
The view "Current Product List" lists all active products (products that are not discontinued) from the "Products" table. The view is created with the following SQL:

CREATE VIEW [Current Product List] AS
SELECT ProductID, ProductName
FROM Products
WHERE Discontinued = No;

Then, we can query the view as follows:
SELECT * FROM [Current Product List];

Another view in the Northwind sample database selects every product in the "Products" table with a unit price higher than the average unit price:

CREATE VIEW [Products Above Average Price] AS
SELECT ProductName, UnitPrice
FROM Products
WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM Products);

We can query the view above as follows:
SELECT * FROM [Products Above Average Price];

Another view in the Northwind database calculates the total sale for each category in 1997. Note that this view selects its data from another view called "Product Sales for 1997":
CREATE VIEW [Category Sales For 1997] AS
SELECT DISTINCT CategoryName, Sum(ProductSales) AS CategorySales
FROM [Product Sales for 1997]
GROUP BY CategoryName;

We can query the view above as follows:
SELECT * FROM [Category Sales For 1997];

We can also add a condition to the query. Let's see the total sale only for the category "Beverages":
SELECT * FROM [Category Sales For 1997]
WHERE CategoryName = 'Beverages';

-------------------------------------------------------------------------------------------------------------------------------------------

11. CREATE OR REPLACE VIEW
You can update a view by using the following syntax:

A. Syntax
CREATE OR REPLACE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;

B. Example
Now we want to add the "Category" column to the "Current Product List" view. We will update the view with the following SQL:
CREATE OR REPLACE VIEW [Current Product List] AS
SELECT ProductID, ProductName, Category
FROM Products
WHERE Discontinued = No;

--------------------------------------------------------------------------------------------------------------------------------------------

12. DROP VIEW
You can delete a view with the DROP VIEW command.

A. Syntax
SQL DROP VIEW Syntax
DROP VIEW view_name;

--------------------------------------------------------------------------------------------------------------------------------------------

13. Injection
SQL injection is a code injection technique that might destroy your database.
SQL injection is one of the most common web hacking techniques.
SQL injection is the placement of malicious code in SQL statements, via web page input.

---SQL in Web Pages---
SQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user gives you an SQL statement that you will unknowingly run on your database.

Look at the following example which creates a SELECT statement by adding a variable (txtUserId) to a select string. The variable is fetched from user input (getRequestString):

txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;

The rest of this chapter describes the potential dangers of using user input in SQL statements.

---SQL Injection Based on 1=1 is Always True---
Look at the example above again. The original purpose of the code was to create an SQL statement to select a user, with a given user id.
If there is nothing to prevent a user from entering "wrong" input, the user can enter some "smart" input like this:

UserId:
105 OR 1=1

Then, the SQL statement will look like this:

SELECT * FROM Users WHERE UserId = 105 OR 1=1;

The SQL above is valid and will return ALL rows from the "Users" table, since OR 1=1 is always TRUE.
Does the example above look dangerous? What if the "Users" table contains names and passwords?
The SQL statement above is much the same as this:

SELECT UserId, Name, Password FROM Users WHERE UserId = 105 or 1=1;

A hacker might get access to all the user names and passwords in a database, by simply inserting 105 OR 1=1 into the input field.

---SQL Injection Based on ""="" is Always True---
Here is an example of a user login on a web site:

Username: John Doe
Password: myPass

uName = getRequestString("username");
uPass = getRequestString("userpassword");
sql = 'SELECT * FROM Users WHERE Name ="' + uName + '" AND Pass ="' + uPass + '"'

Result
SELECT * FROM Users WHERE Name ="John Doe" AND Pass ="myPass"

A hacker might get access to user names and passwords in a database by simply inserting " OR ""=" into the user name or password text box:

User Name: " or ""="
Password: " or ""="

The code at the server will create a valid SQL statement like this:

SELECT * FROM Users WHERE Name ="" or ""="" AND Pass ="" or ""=""

The SQL above is valid and will return all rows from the "Users" table, since OR ""="" is always TRUE.

---SQL Injection Based on Batched SQL Statements---
Most databases support batched SQL statement.
A batch of SQL statements is a group of two or more SQL statements, separated by semicolons.
The SQL statement below will return all rows from the "Users" table, then delete the "Suppliers" table.


SELECT * FROM Users; DROP TABLE Suppliers

Look at the following example:

txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;

And the following input:

User id: 105; DROP TABLE Suppliers

The valid SQL statement would look like this:

SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;


---Use SQL Parameters for Protection---
To protect a web site from SQL injection, you can use SQL parameters.
SQL parameters are values that are added to an SQL query at execution time, in a controlled manner.

ASP.NET Razor Example:
txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = @0";
db.Execute(txtSQL,txtUserId);
Note that parameters are represented in the SQL statement by a @ marker.
The SQL engine checks each parameter to ensure that it is correct for its column and are treated literally, and not as part of the SQL to be executed.

Another Example:
txtNam = getRequestString("CustomerName");
txtAdd = getRequestString("Address");
txtCit = getRequestString("City");
txtSQL = "INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)";
db.Execute(txtSQL,txtNam,txtAdd,txtCit);

The following examples shows how to build parameterized queries in some common web languages.

SELECT STATEMENT IN ASP.NET:
txtUserId = getRequestString("UserId");
sql = "SELECT * FROM Customers WHERE CustomerId = @0";
command = new SqlCommand(sql);
command.Parameters.AddWithValue("@0",txtUserID);
command.ExecuteReader();

INSERT INTO STATEMENT IN ASP.NET:
txtNam = getRequestString("CustomerName");
txtAdd = getRequestString("Address");
txtCit = getRequestString("City");
txtSQL = "INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)";
command = new SqlCommand(txtSQL);
command.Parameters.AddWithValue("@0",txtNam);
command.Parameters.AddWithValue("@1",txtAdd);
command.Parameters.AddWithValue("@2",txtCit);
command.ExecuteNonQuery();

INSERT INTO STATEMENT IN PHP:
$stmt = $dbh->prepare("INSERT INTO Customers (CustomerName,Address,City)
VALUES (:nam, :add, :cit)");
$stmt->bindParam(':nam', $txtNam);
$stmt->bindParam(':add', $txtAdd);
$stmt->bindParam(':cit', $txtCit);
$stmt->execute();

-------------------------------------------------------------------------------------------------------------------------------------------------

14. SQL Hosting

If you want your web site to be able to store and retrieve data from a database, your web server should have access to a database-system that uses the SQL language. If your web server is hosted by an Internet Service Provider (ISP), you will have to look for SQL hosting plans.
The most common SQL hosting databases are MS SQL Server, Oracle, MySQL, and MS Access.

MS SQL Server
Microsoft's SQL Server is a popular database software for database-driven web sites with high traffic.
SQL Server is a very powerful, robust and full featured SQL database system.

Oracle
Oracle is also a popular database software for database-driven web sites with high traffic.
Oracle is a very powerful, robust and full featured SQL database system.

MySQL
MySQL is also a popular database software for web sites.
MySQL is a very powerful, robust and full featured SQL database system.
MySQL is an inexpensive alternative to the expensive Microsoft and Oracle solutions.

Access
When a web site requires only a simple database, Microsoft Access can be a solution.
Access is not well suited for very high-traffic, and not as powerful as MySQL, SQL Server, or Oracle.


======================================================================================================================================================================================================<THE END>=======================================================================================
